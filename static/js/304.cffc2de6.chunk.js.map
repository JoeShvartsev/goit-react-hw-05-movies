{"version":3,"file":"static/js/304.cffc2de6.chunk.js","mappings":"sPAEMA,EAAU,mCACVC,EAAW,sCAEV,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA0BC,GAA1B,gGAEoBC,EAAAA,EAAAA,IAAA,UAAaH,GAAb,OAAwBE,EAAxB,YAAsC,CAC3DE,QAAS,CACPC,cACE,6NACFC,OAAQ,oBAEVC,OAAQ,CACNC,QAAST,EACTU,SAAU,WAVX,cAEGC,EAFH,yBAeIA,EAASC,MAfb,gCAiBHC,QAAQC,MAAR,MAjBG,gF,aC+BP,EA/BiB,WACf,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAEFE,GAAWC,EAAAA,EAAAA,cAAW,iBAAE,oGACTnB,EAAWgB,GADF,OACtBN,EADsB,OAE5BK,EAAWL,EAAKU,SAFY,2CAG5B,CAACJ,IASH,OAPAK,EAAAA,EAAAA,YAAU,WACRH,GAED,GAAE,CAACF,EAAQE,KAKV,8BACGJ,EAAQQ,OAAS,EAChBR,EAAQS,KAAI,SAAAC,GAAM,OAChB,4BACE,qCAAaA,EAAOC,WACpB,uBAAID,EAAOE,YAFHF,EAAOvB,GADD,KAOlB,iEAIP,C","sources":["Api/fetchByReviewsDetails.js","components/Review/Review.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst API_KEY = \"63a74474f933eda5b8cc066d3494dc04\";\nconst BASE_URL = \"https://api.themoviedb.org/3/movie/\";\n\nexport async function getReviews(id) {\n  try {\n    const response = await axios.get(`${BASE_URL}${id}/reviews`, {\n      headers: {\n        Authorization:\n          \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI2M2E3NDQ3NGY5MzNlZGE1YjhjYzA2NmQzNDk0ZGMwNCIsInN1YiI6IjY0ODZiMGMzYzAzNDhiMDExZmJkYzFlMCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.BkRWT5yob_WZgHbbPPNq-qgAcjbVt-Or65dfa93IL8Y\",\n        accept: \"application/json\",\n      },\n      params: {\n        api_key: API_KEY,\n        language: \"en-US\",\n      },\n    });\n\n    \n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getReviews } from 'Api/fetchByReviewsDetails';\nimport { useCallback } from 'react';\n\n  const Review = () => {\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n  \n  const fetchData =useCallback( async () => {\n    const data = await getReviews(movieId);\n    setReviews(data.results);\n  },[movieId]);\n\n  useEffect(() => {\n    fetchData();\n    \n  }, [movieId,fetchData]);\n\n  \n\n  return (\n    <>\n      {reviews.length > 0 ? (\n        reviews.map(review => (\n          <div key={review.id}>\n            <h3>Author: {review.author}</h3>\n            <p>{review.content}</p>\n          </div>\n        ))\n      ) : (\n        <p>Sorry, no reviews for this movie yet</p>\n      )}\n    </>\n  );\n};\nexport default Review\n\n\n\n\n"],"names":["API_KEY","BASE_URL","getReviews","id","axios","headers","Authorization","accept","params","api_key","language","response","data","console","error","useState","reviews","setReviews","movieId","useParams","fetchData","useCallback","results","useEffect","length","map","review","author","content"],"sourceRoot":""}